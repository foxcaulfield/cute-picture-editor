{"version":3,"sources":["components/Slider/Slider.tsx","components/SidebarItem/SidebarItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Slider","props","className","type","min","max","value","onChange","handleChange","SidebarItem","active","onClick","handleClick","name","DEFAULT_OPTIONS","property","range","unit","App","resultCanvasReal","useRef","useState","imgDataReal","undefined","setImgDataReal","imgData","setImgData","selectedOptionIndex","setSelectedOptionIndex","options","setOptions","selectedOption","handleResetOptions","getImageStyle","filter","map","option","join","loadCanvas","isManual","canvasReal","current","contextReal","getContext","setMemorizedCanvasReal","setMemorizedContextReal","memorizedCanvasReal","memorizedContextReal","image","Image","onload","clearRect","width","height","save","canvas","fitToContainerReal","drawImage","setIsImageOverflowHorizontal","isOverflowHorizontal","potentiallyOverflow","toDataURL","aReal","click","restore","src","isDownloading","setIsDownloading","useEffect","scale","setScale","isImageOverflowHorizontal","element","scrollWidth","clientWidth","isImageOverflowVertical","setIsImageOverflowVertical","scrollHeight","clientHeight","Button","variant","size","startIcon","id","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","hidden","currentTarget","htmlFor","style","display","cursor","pointerEvents","ref","justifyContent","transform","transformOrigin","download","href","flexDirection","IconButton","step","console","log","index","prevOptions","flexWrap","background","color","letterSpacing","whiteSpace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76068f71.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Slider(props:any) { //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  return (\r\n    <div className=\"sliderContainer\">\r\n      {/* Slider */}\r\n      <input type=\"range\" className=\"slider magic\" min={props.min} max={props.max} value={props.value} onChange={props.handleChange}></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\n\r\ntype SidebarItemType = {\r\n  name: string;\r\n  active: boolean;\r\n  handleClick: any; //!!!!!!!!!!!!!!!!!!!!!!!!1\r\n};\r\n\r\nfunction SidebarItem(props: SidebarItemType) {\r\n  return (\r\n    <button\r\n      className={`sidebarItem ${props.active ? \"active\" : \"\"}`}\r\n      onClick={props.handleClick}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SidebarItem;\r\n","import React, { SyntheticEvent, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport MainScreen from \"./components/MainScreen/MainScreen\";\nimport Slider from \"./components/Slider/Slider\";\nimport SidebarItem from \"./components/SidebarItem/SidebarItem\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\";\nimport ZoomOutIcon from \"@material-ui/icons/ZoomOut\";\n\ntype DefaultOptionsType = Array<OptionType>;\n\ntype OptionType = {\n  name: number | string;\n  property:number | string;\n  value: number | string;\n  range: {\n    min: number | string;\n    max: number | string;\n  };\n  unit: number | string;\n};\n\ntype ImgDataRealType = {\n  imgDataReal: string | undefined | ArrayBuffer | null;\n};\n\ntype ImgDataType = {\n  imgData: string | undefined | ArrayBuffer | null;\n};\n\nconst DEFAULT_OPTIONS: DefaultOptionsType = [\n  {\n    name: \"Brightness\",\n    property: \"brightness\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Contrast\",\n    property: \"contrast\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Saturation\",\n    property: \"saturate\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Grayscale\",\n    property: \"grayscale\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Sepia\",\n    property: \"sepia\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\",\n  },\n  {\n    name: \"Hue rotate\",\n    property: \"hue-rotate\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 360,\n    },\n    unit: \"deg\",\n  },\n  {\n    name: \"Blur\",\n    property: \"blur\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 20,\n    },\n    unit: \"px\",\n  },\n];\n\n// type SetOptionsType = Array<DefaultOptionsType>;\n\nfunction App() {\n  // #10 define ref for canvas (and set in attributes in JSX)\n  const resultCanvasReal = useRef<HTMLCanvasElement>(null);\n  const [imgDataReal, setImgDataReal] = useState<ImgDataRealType>({\n    imgDataReal: undefined,\n  });\n\n  //set image data in base64 format\n  const [imgData, setImgData] = useState<ImgDataType>({ imgData: undefined });\n\n  //set default selected edit option\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState<number>(0);\n\n  //set options for sidebar\n  const [options, setOptions] = useState(DEFAULT_OPTIONS);\n\n  //set current selected option index\n  const selectedOption = options[selectedOptionIndex];\n\n  //handle slider change\n  function handleSliderChange(props: React.ChangeEvent<HTMLInputElement> | null) {\n    console.log(props)\n    setOptions((prevOptions : DefaultOptionsType) => {\n      return prevOptions.map((option:   {name: number | string;\n        property: number | string;\n        value: number | string;\n        range: {\n          min: number| string;\n          max: number| string;\n        };\n        unit: string| number;}, index : number) => {\n        if (index !== selectedOptionIndex) return option;\n        return { ...option, value: props!.target.value };\n      });\n    });\n  }\n\n  function handleResetOptions() {\n    setOptions(DEFAULT_OPTIONS as []);\n  }\n\n  //handle save image from canvas(real)\n  function handleSaveReal(isManual: boolean) {\n    //manual trigger check\n    if (isManual) {\n      loadCanvas(imgData.imgData, isManual);\n    } else {\n      loadCanvas(imgDataReal.imgDataReal, false);\n    }\n  }\n\n  //get current style\n  function getImageStyle() {\n    const filters = options.map((option) => {\n      return `${option.property}(${option.value}${option.unit})`;\n    });\n    return { filter: filters.join(\" \") };\n  }\n\n  // #04 fall into fileLoad function\n  function loadFile(e: React.ChangeEvent<HTMLInputElement> | null) {\n    // #05 assign our file to variable\n    let file = e!.target!.files![0];\n\n    //  #06 define FileReader\n    let reader = new FileReader();\n\n    reader.onloadend = function () {\n      //reset options to defaut\n      handleResetOptions();\n\n      //  #08 when reader load - set data via useState hook\n      setImgData({ imgData: reader.result });\n\n      // #09 call the loadCanvas function and pass the reader result\n      loadCanvas(reader.result);\n    };\n\n    //  #07 if there is a file - call readAsData method\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }\n\n  function fitToContainerReal(canvas: HTMLCanvasElement, image: HTMLImageElement ) {\n    canvas.width = image.width;\n    canvas.height = image.height;\n  }\n\n  // #11 fall into loadCanvas function\n  function loadCanvas(\n    imgData: string | ArrayBuffer | null | undefined,\n    isManual?: boolean\n  ) {\n    // #12 define canvas and 2d context\n    let canvasReal = resultCanvasReal.current as HTMLCanvasElement;\n    let contextReal = canvasReal.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    //check for manual trigger, if false - set \"initial\" canvas(image) state\n    if (!isManual) {\n      setMemorizedCanvasReal(canvasReal);\n      setMemorizedContextReal(contextReal);\n    }\n    if (isManual) {\n      canvasReal  = memorizedCanvasReal as HTMLCanvasElement;\n      contextReal  = memorizedContextReal as CanvasRenderingContext2D;\n    }\n\n    // #13 set image to canvas\n    let image = new Image();\n\n    image.onload = function () {\n      contextReal.clearRect(0, 0, canvasReal.width, canvasReal.height);\n      contextReal.save();\n\n      fitToContainerReal(canvasReal, image);\n\n      contextReal.filter = getImageStyle().filter;\n\n      contextReal.drawImage(image, 0, 0, canvasReal.width, canvasReal.height);\n\n      //exp for wide images\n      setIsImageOverflowHorizontal(isOverflowHorizontal(potentiallyOverflow));\n\n      setImgDataReal({ imgDataReal: canvasReal.toDataURL(\"image/jpeg\") });\n      // canvasReal.toDataURL(\"image/jpeg\").href;\n\n      //\"save\" option\n      if (isManual) {\n        aReal!.current!.click();\n      }\n\n      contextReal.restore();\n\n      canvasReal.toDataURL(\"image/jpeg\");\n    };\n\n    image.src = imgData as string;\n  }\n\n  //ref for anchor\n  const aReal = useRef<HTMLAnchorElement | null>(null);\n\n  //is picture downloading now\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  //\"initial\" state for canvas and context\n  const [memorizedCanvasReal, setMemorizedCanvasReal] = useState<HTMLCanvasElement | undefined>();\n  const [memorizedContextReal, setMemorizedContextReal] = useState<CanvasRenderingContext2D | undefined>();\n\n  //set isDowloading to false for next render\n  useEffect(() => {\n    if (isDownloading === true) {\n      setIsDownloading(false);\n    }\n  }, [imgDataReal.imgDataReal]);\n\n  //current scale\n  const [scale, setScale] = useState<number | string>(1);\n\n  //is picture overflow horizontal\n  const [\n    isImageOverflowHorizontal,\n    setIsImageOverflowHorizontal,\n  ] = useState<boolean | null>();\n\n  //function for detecting overflow horizontal\n  function isOverflowHorizontal(element: React.RefObject<HTMLDivElement>) {\n    return element.current!.scrollWidth > element.current!.clientWidth;\n  }\n\n  //is picture overflow horizontal\n  const [isImageOverflowVertical, setIsImageOverflowVertical] = useState<boolean | null>();\n\n  //function for detecting overflow vertical\n  function isOverflowVertical(element: React.RefObject<HTMLDivElement>) {\n    return element.current!.scrollHeight > element.current!.clientHeight;\n  }\n\n  //ref for div tht contains image\n  const potentiallyOverflow = useRef<null>(null);\n\n  //set actual isOverflowHorizontal value when scale is changing\n  useEffect(() => {\n    setIsImageOverflowHorizontal(isOverflowHorizontal(potentiallyOverflow));\n    setIsImageOverflowVertical(isOverflowVertical(potentiallyOverflow));\n  }, [scale, imgData]);\n\n  return (\n    <div className=\"container\">\n      {/* <MainScreen/> */}\n      <div\n      className=\"headerContainer\"\n        // style={{\n        //   display: \"flex\",\n        //   flexDirection: \"row\",\n        //   justifyContent: \"space-between\",\n        //   background: \"white\",\n        //   alignItems: \"center\",\n        //   padding: \"0.5em\",\n        //   flexWrap: \"wrap\"\n        // }}\n      >\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          className=\"gradientButton\"\n          startIcon={<SaveIcon />}\n          onClick={() => {\n            setIsDownloading(true);\n            handleSaveReal(true);\n          }}\n        >\n          Save\n        </Button>\n\n        <div className=\"headerName\">Cute picture editor</div>\n\n        <input\n          type=\"file\"\n          id=\"fileBrowser\"\n          onChange={loadFile}\n          hidden={true}\n          onClick={(e) => (e.currentTarget.value = \"\")}\n        />\n\n        <label\n          htmlFor=\"fileBrowser\"\n          style={{ display: \"block\", cursor: \"pointer\" }}\n        >\n          {/* Open Image  */}\n          <Button\n            variant=\"contained\"\n            style={{ pointerEvents: \"none\" }}\n            size=\"large\"\n            className=\"gradientButtonUpload\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Upload\n          </Button>\n        </label>\n      </div>\n      <div className=\"imageAndScalingContainer\">\n        <div\n          ref={potentiallyOverflow}\n          className=\"view\"\n          style={{\n            justifyContent: `${\n              isImageOverflowHorizontal === false &&\n              isImageOverflowVertical === false\n                ? \"center\"\n                : isImageOverflowHorizontal === false &&\n                  isImageOverflowVertical === true\n                ? \"center\"\n                : \"flex-start\"\n            }`,\n          }}\n        >\n          <img\n            style={{\n              ...getImageStyle(),\n              // maxWidth:\"100%\",\n              transform: `scale(${scale})`,\n              transformOrigin: `${\n                isImageOverflowHorizontal === false &&\n                isImageOverflowVertical === false\n                  ? \"center center\"\n                  : isImageOverflowHorizontal === false &&\n                    isImageOverflowVertical === true\n                  ? \"top center\"\n                  : isImageOverflowHorizontal === true &&\n                    isImageOverflowVertical === false\n                  ? \"left\"\n                  : \"top left\"\n              }`,\n            }}\n            hidden={false}\n            id=\"thePicture\"\n            src={imgData.imgData as string}\n          />\n        </div>\n      </div>\n      <div className=\"controller\">\n        <a\n          hidden={true}\n          ref={aReal}\n          id=\"download\"\n          download=\"myImage.jpg\"\n          href={imgDataReal.imgDataReal as string}\n        >\n          Download to myImage.jpg\n        </a>\n        <div className=\"mainImage\"></div>\n        <div className=\"buttonsContainer\">\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            {/* <Icon>add_circle</Icon> */}\n            <IconButton size=\"small\">\n              <ZoomOutIcon onClick={() => setScale(scale as number * 0.9)} />\n            </IconButton>\n\n            <input\n              type=\"range\"\n              min=\"0.1\"\n              max=\"2\"\n              value={scale}\n              step=\"0.01\"\n              onChange={(e) => {\n                console.log(e.target.value);\n                setScale(e.target.value);\n              }}\n            />\n            <IconButton size=\"small\">\n              <ZoomInIcon\n                onClick={() => {\n                  setScale(scale as number * 1.1);\n                }}\n              />\n            </IconButton>\n          </div>\n          <div></div>\n        </div>\n        <div className=\"sidebar\">\n          {options.map((option, index) => {\n            return (\n              <SidebarItem\n                key={index}\n                name={option.name as string}\n                active={index === selectedOptionIndex}\n                handleClick={() => setSelectedOptionIndex(index)}\n              />\n            );\n          })}\n          {/* <SidebarItem /> */}\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div style={{ width: \"100%\" }}>\n            <Slider\n              min={selectedOption.range.min}\n              max={selectedOption.range.max}\n              value={selectedOption.value}\n              handleChange={handleSliderChange}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              flexWrap: \"nowrap\",\n              background: \"white\",\n              justifyContent: \"space-evenly\",\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"small\"\n              onClick={() => setScale(1)}\n              style={{\n                letterSpacing: \"0.1em\",\n                color: \"black\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              reset scale\n            </Button>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              onClick={() => handleResetOptions()}\n              style={{\n                letterSpacing: \"0.1em\",\n                color: \"black\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              reset options\n            </Button>\n          </div>\n        </div>\n        <div>{/* #02 Define input with file type */}</div>\n      </div>\n      <canvas\n        hidden={true}\n        className=\"canvasReal\"\n        ref={resultCanvasReal}\n      ></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}